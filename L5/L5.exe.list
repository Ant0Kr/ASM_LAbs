EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
L5.exe -- emu8086 assembler version: 4.08  
 
[ 18.04.2017  --  19:43:51 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       ;Лабораторная работа №5 - "Подсчитать число строк в файле в которых есть заданое слово"
[   2]        :                                       .model small
[   3]        :                                       .stack 100h
[   4]        :                                       .data
[   5]    0100: 00 00 00 00 00 00 00 00 00 00 00 00   buffer db 1024 dup(?)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00                         
[   6]    0500: 00 00 00 00 00 00 00 00 00 00 00 00   dir db 126 dup(0)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00                   
[   7]    057E: 00 00                                 line_count dw 0
[   8]    0580: 00 00 00 00 00 00 00 00 00            line_count_str db 9 dup(?)
[   9]    0589: 00                                    line db 0
[  10]    058A: 6C 6F 6C 24                           searchWord db "lol$"
[  11]    058E: 45 72 72 6F 72 21 45 72 72 6F 72 20   error_open_str db "Error!Error of open $"
                6F 66 20 6F 70 65 6E 20 24          
[  12]    05A3: 45 72 72 6F 72 21 4C 69 6E 65 20 69   error_line_str db "Error!Line is empty! Please input correct value!$"
                73 20 65 6D 70 74 79 21 20 50 6C 65 
                61 73 65 20 69 6E 70 75 74 20 63 6F 
                72 72 65 63 74 20 76 61 6C 75 65 21 
                24                                  
[  13]    05D4: 54 68 65 20 6E 75 6D 62 65 72 20 6C   msg_str db "The number lines that contain my word!: $"
                69 6E 65 73 20 74 68 61 74 20 63 6F 
                6E 74 61 69 6E 20 6D 79 20 77 6F 72 
                64 21 3A 20 24                      
[  14]        :                                       
[  15]        :                                       .code
[  16]        :                                       
[  17]        :                                       cout MACRO outputLine                  ; макрос вывода строки на экран
[  18]        :                                       mov ah, 09h
[  19]        :                                       lea dx, outputLine
[  20]        :                                       int 21h
[  21]        :                                       endm
[  22]        :                                       
[  23]    0600:                                       start:
[  24]        :                                       
[  25]    0600: B8 10 00                              mov ax, @data
[  26]    0603: 8E D8                                 mov ds, ax
[  27]        :                                       
[  28]    0605: BF 00 04                              lea di, dir
[  29]    0608: E8 C8 00                              call getComandLine                 ; процедура парсинга командной строки
[  30]        :                                       
[  31]    060B: BA 00 04                              lea dx, dir                        ; путь до открываемого файла
[  32]    060E: B4 3D                                 mov ah, 3Dh                        ; функция отрытия файла
[  33]    0610: B0 00                                 mov al, 00h                        ; только чтение
[  34]    0612: CD 21                                 int 21h
[  35]        :                                       
[  36]    0614: 73 03 E9 A4 00                        jc error_open                      ; если не отрыли выводим ошибку
[  37]        :                                       
[  38]    0619: 8B D8                                 mov bx,ax
[  39]        :                                       
[  40]    061B:                                       read:
[  41]    061B: B4 3F                                 mov ah, 3Fh                        ; чтение из файла
[  42]    061D: B9 00 04                              mov cx, 1024                       ; 1024 байт
[  43]    0620: BA 00 00                              lea dx, buffer                     ; в массив buffer
[  44]    0623: CD 21                                 int 21h
[  45]        :                                       
[  46]    0625: 33 F6                                 xor si, si                         ;индексация по буферу
[  47]    0627: 8B C8                                 mov cx, ax                         ;в ах длина строки(реальная)
[  48]    0629: 33 FF                                 xor di,di
[  49]        :                                       
[  50]    062B:                                       my_loop:
[  51]    062B: 80 3C 20                              cmp buffer[si],' '              ;если пробел то пропускаем
[  52]    062E: 74 65                                 je continue
[  53]    0630: 80 3C 0D                              cmp buffer[si],13               ;символ возврата каретки
[  54]    0633: 74 60                                 je continue
[  55]    0635: 80 3C 0A                              cmp buffer[si],10               ;символ перехода
[  56]    0638: 74 5B                                 je continue
[  57]    063A: EB 00                                 jmp lets_compare                ;если нашли символ
[  58]        :                                       
[  59]    063C:                                       lets_compare:
[  60]    063C: 80 BD 8A 04 24                        cmp searchWord[di],'$'         ;смотрим не кончилось ли слово которое ищем
[  61]    0641: 74 29                                 je last_compare
[  62]    0643: 8A 14                                 mov dl,buffer[si]              ;иначе сравниваем его с буфером
[  63]    0645: 8A B5 8A 04                           mov dh,searchWord[di]
[  64]    0649: 3A D6                                 cmp dl,dh
[  65]    064B: 75 05                                 jne miss_characters            ;если не иквл то пропускаем слово
[  66]    064D: 46                                    inc si
[  67]    064E: 49                                    dec cx
[  68]    064F: 47                                    inc di
[  69]    0650: EB EA                                 jmp lets_compare
[  70]        :                                       
[  71]    0652:                                       miss_characters:                     ;пропуск слова в буфере, которое не равно заданому
[  72]    0652: 83 F9 01                              cmp cx,1                       ;если дошли до конца файла
[  73]    0655: 74 3E                                 je continue                    ;выход в continue который завершит программу
[  74]    0657: 49                                    dec cx
[  75]    0658: 46                                    inc si
[  76]    0659: 80 3C 0D                              cmp buffer[si],13
[  77]    065C: 74 37                                 je continue
[  78]    065E: 80 3C 0A                              cmp buffer[si],10
[  79]    0661: 74 32                                 je continue
[  80]    0663: 80 3C 20                              cmp buffer[si],' '
[  81]    0666: 75 EA                                 jne miss_characters            ;иначе пропускаем не пробелы
[  82]    0668: 33 FF                                 xor di,di
[  83]    066A: EB 29                                 jmp continue
[  84]        :                                       
[  85]    066C:                                       last_compare:                        ;если в строке где записано искомое слово пришли на $
[  86]    066C: 80 3C 0D                              cmp buffer[si],13              ;инкрементируем счетчик в том случае если после сравнимаего слова нет символов
[  87]    066F: 74 0C                                 je inc_counter
[  88]    0671: 80 3C 0A                              cmp buffer[si],10
[  89]    0674: 74 07                                 je inc_counter
[  90]    0676: 80 3C 20                              cmp buffer[si],' '
[  91]    0679: 74 02                                 je inc_counter
[  92]    067B: EB D5                                 jmp miss_characters           ;иначе пропускаем эти символы
[  93]        :                                       
[  94]    067D:                                       inc_counter:                        ; инкрементируем счетчик
[  95]    067D: 33 FF                                 xor di,di
[  96]    067F: FF 06 7E 04                           inc line_count
[  97]    0683: EB 02                                 jmp miss_line                 ; и пропускаем строку в которой найденное слово находится(по заданию)
[  98]    0685: EB 0E                                 jmp continue
[  99]        :                                       
[ 100]    0687:                                       miss_line:
[ 101]    0687: 46                                    inc si
[ 102]    0688: 83 F9 01                              cmp cx,1
[ 103]    068B: 74 08                                 je continue
[ 104]    068D: 49                                    dec cx
[ 105]    068E: 80 3C 0D                              cmp buffer[si],13             ;дошли до символа возврата каретки и вышли
[ 106]    0691: 74 02                                 je continue
[ 107]    0693: EB F2                                 jmp miss_line
[ 108]        :                                       
[ 109]    0695:                                       continue:
[ 110]    0695: 46                                    inc si
[ 111]    0696: E2 93                                 loop my_loop                         ;цикл следования по  памяти(пока сх!=0)
[ 112]        :                                       
[ 113]    0698: 3D 00 04                              cmp ax, 1024                       ; если не совпадает то мы вычитали все из файла(иначе снова читаем)
[ 114]    069B: 75 03 E9 7B FF                        je read
[ 115]        :                                       
[ 116]        :                                       
[ 117]    06A0: B4 3E                                 mov ah,3Eh                         ; функция закрытия файла
[ 118]    06A2: CD 21                                 int 21h
[ 119]        :                                       
[ 120]    06A4: BB 7E 04                              lea bx, line_count
[ 121]    06A7: BF 80 04                              lea di, line_count_str
[ 122]    06AA: E8 46 00                              call iTOstr                        ; перевод числа непустых строк в строку для вывода на экран
[ 123]        :                                       
[ 124]    06AD: B4 09 BA D4 04 CD 21                  cout [msg_str]
[ 125]    06B4: B4 09 BA 80 04 CD 21                  cout [line_count_str]
[ 126]        :                                       
[ 127]    06BB: EB 12                                 jmp exit
[ 128]        :                                       
[ 129]    06BD:                                       error_open:                            ; ошибка - некорректный путь до файла
[ 130]    06BD: B4 09 BA 8E 04 CD 21                  cout [error_open_str]
[ 131]    06C4: EB 09                                 jmp exit
[ 132]        :                                       
[ 133]    06C6:                                       error_line:
[ 134]    06C6: B4 09 BA A3 04 CD 21                  cout [error_line_str]              ; ошибка - пустая командная строка
[ 135]    06CD: EB 00                                 jmp exit
[ 136]        :                                       
[ 137]    06CF:                                       exit:
[ 138]    06CF: B4 4C                                 mov ah, 4ch
[ 139]    06D1: CD 21                                 int 21h
[ 140]        :                                       
[ 141]        :                                       
[ 142]        :                                       
[ 143]        :                                       
[ 144]        :                                       
[ 145]    06D3:                                       getComandLine PROC                     ; процедура парсинга командной строки
[ 146]    06D3: 33 C9                                 xor cx,cx
[ 147]    06D5: BE 80 00                              mov si, 80h
[ 148]    06D8: 26 8A 0C                              mov cl, es:[si]                    ; кол-во символов в командной строке
[ 149]        :                                       
[ 150]    06DB: 83 F9 00                              cmp cx, 0
[ 151]    06DE: 74 E6                                 je error_line
[ 152]        :                                       
[ 153]    06E0: 46                                    inc si
[ 154]    06E1:                                       cycle:
[ 155]    06E1: 26 8A 04                              mov al, es:[si]
[ 156]    06E4: 3C 20                                 cmp al, ' '              ;игнор пробелов перед название файла
[ 157]    06E6: 74 07                                 je next_step
[ 158]    06E8: 3C 0D                                 cmp al, 13               ;до энтера работаем
[ 159]    06EA: 74 03                                 je next_step
[ 160]    06EC: 88 05                                 mov [di], al
[ 161]    06EE: 47                                    inc di
[ 162]    06EF:                                       next_step:
[ 163]    06EF: 46                                    inc si
[ 164]    06F0: E2 EF                                 loop cycle
[ 165]    06F2: C3                                    ret
[ 166]        :                                       endp
[ 167]        :                                       
[ 168]    06F3:                                       iTOstr PROC                            ; процедура перевода числа в строку
[ 169]    06F3: 8B 07                                 mov ax, [bx]
[ 170]    06F5: BB 0A 00                              mov bx, 10
[ 171]    06F8: 33 C9                                 xor cx, cx
[ 172]        :                                       
[ 173]    06FA:                                       division:
[ 174]    06FA: 33 D2                                 xor dx, dx
[ 175]    06FC: F7 F3                                 div bx
[ 176]    06FE: 52                                    push dx
[ 177]    06FF: 41                                    inc cx
[ 178]    0700: 3D 00 00                              cmp ax, 0
[ 179]    0703: 75 F5                                 jne division
[ 180]        :                                       
[ 181]    0705:                                       save_in_str:
[ 182]    0705: 5A                                    pop dx
[ 183]    0706: 80 C2 30                              add dl, 30h
[ 184]    0709: 88 15                                 mov [di], dl
[ 185]    070B: 47                                    inc di
[ 186]    070C: E2 F7                                 loop save_in_str
[ 187]        :                                       
[ 188]    070E: C6 05 24                              mov [di], '$'
[ 189]    0711: C3                                    ret
[ 190]        :                                       endp
[ 191]        :                                       end start
[ 192]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 12      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 05      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 60      -   check sum (l.byte)
0013: 6E      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 60      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 60      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
